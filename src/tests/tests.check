#include "../graph.h"
#include "../rpr/core.h"
#include "../rpr/expr.h"
#include "../rpr/llist.h"
#include "../rpr/stack.h"
#define EPS 1e-9
#define MIN_X -1000000
#define MAX_X 1000000
#include <float.h>
#include <limits.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>

/*
 * LIST TESTS
 */

#test ll_list_1
struct ll_node *l = ll_node_new(1, 2.2);
uint expected_result, actual_result;
expected_result = 1;
actual_result = l->state;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert(fabs(2.2 - l->datum) < EPS);
ll_destroy_list(l);

#test ll_list_2
struct ll_node *l = ll_node_new(1, 2.2);
uint expected_result, actual_result;
l = ll_node_prepend(l, 55, -99.99);
expected_result = 55;
actual_result = l->state;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert(fabs(-99.99 - l->datum) < EPS);
ll_destroy_list(l);

#test ll_list_3
struct ll_node *l = ll_node_new(1, 2.2);
uint expected_result, actual_result;
ll_node_append(l, 55, -99.99);
expected_result = 1;
actual_result = l->state;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_uint_eq(l->next->state, 55);
ck_assert(fabs(2.2 - l->datum) < EPS);
ck_assert(fabs(-99.99 - l->next->datum) < EPS);
ll_destroy_list(l);

#test ll_list_4
struct ll_node *l = ll_node_new(1, 2.2);
uint expected_result, actual_result;
expected_result = 1;
actual_result = l->state;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert(fabs(2.2 - l->datum) < EPS);
ll_node_destroy(&l);

#test ll_list_5
struct ll_node *l = ll_node_new(1, 2.2);
uint expected_result, actual_result;
for (uint i = 0; i < 1000; i++) {
  ll_node_append(l, i, -99.99 + i);
}
expected_result = 999;
actual_result = ll_last_node(l)->state;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_ptr_eq(ll_last_node(l)->next, NULL);
ll_destroy_list(l);

#test ll_list_6
struct ll_node *l = ll_node_new(1, 2.2);
uint expected_result, actual_result;
for (uint i = 0; i < 1000; i++) {
  ll_node_append(l, i, -99.99 + i);
}
expected_result = 998;
actual_result = ll_before_last_node(l)->state;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_ptr_eq(ll_before_last_node(l)->next, ll_last_node(l));
ll_destroy_list(l);

/*
 * STACK TESTS
 *
struct stk *stk_new(void);
void stk_destroy(struct stk **k);
void stk_push(struct stk *k, const unsigned int s, const double d);
void stk_pop(struct stk *k);
double stk_peek(const struct stk *k);
int stk_peek_status(const struct stk *k);
*/

#test stack_1
struct stk *s = stk_new();
uint expected_result, actual_result;
expected_result = 0;
actual_result = s->depth;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_ptr_eq(s->top, NULL);
stk_destroy(&s);

#test stack_2
struct stk *s = stk_new();
uint expected_result, actual_result;
stk_push(s, 7, -5.45);
expected_result = 1;
actual_result = s->depth;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_ptr_ne(s->top, NULL);
stk_destroy(&s);

#test stack_3
struct stk *s = stk_new();
uint expected_result, actual_result;
stk_push(s, 7, -5.45);
stk_pop(s);
expected_result = 0;
actual_result = s->depth;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_ptr_eq(s->top, NULL);
stk_destroy(&s);

#test stack_4
struct stk *s = stk_new();
uint expected_result, actual_result;
stk_push(s, 7, -5.45);
expected_result = 7;
actual_result = stk_peek_status(s);
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_ptr_ne(s->top, NULL);
stk_destroy(&s);

#test stack_5
struct stk *s = stk_new();
uint expected_result, actual_result;
stk_push(s, 7, -5.45);
expected_result = 7;
actual_result = stk_peek_status(s);
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_ptr_ne(s->top, NULL);
ck_assert(fabs(-5.45 - stk_peek(s)) < EPS);
stk_destroy(&s);

/*
 * EXPR TESTS
 *
struct expr *expr_new(void);
void expr_destroy(struct expr **e);
void expr_add_symbol(struct expr *e, const unsigned int s, const double d);
struct expr *expr_shunt(const struct expr *e);
char *one_expr_from_string(char *prog, struct expr **infix_to_fill, int *good,
                           int *parents);
struct expr *expr_from_string(char *a, int *good);
*/
#test expr_1
struct expr *e = expr_new();
uint expected_result, actual_result;
expected_result = 0;
actual_result = e->length;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_ptr_eq(e->head, NULL);
expr_destroy(&e);

#test expr_2
struct expr *e = expr_new();
uint expected_result, actual_result;
expr_add_symbol(e, 77, DBL_MAX);
expected_result = 1;
actual_result = e->length;
ck_assert_ptr_ne(e->head, NULL);
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_uint_eq(e->head->state, 77);
ck_assert(fabs(DBL_MAX - e->head->datum) < EPS);
expr_destroy(&e);

#test expr_3
struct expr *e = expr_new();
uint expected_result, actual_result;
expr_add_symbol(e, 77, DBL_MAX);
expected_result = 1;
actual_result = e->length;
ck_assert_ptr_ne(e->head, NULL);
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_uint_eq(e->head->state, 77);
ck_assert(fabs(DBL_MAX - e->head->datum) < EPS);
expr_destroy(&e);

#test expr_4
char str[1000] = "sin(cos(x^2)^(1*-100))*x";
struct expr *e;
uint expected_result, actual_result;
int res = 0;
e = expr_from_string(str, &res);
expected_result = 18;
actual_result = e->length;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_int_eq(res, 1);
expr_destroy(&e);

#test expr_5
char str[1000] = "sin(cos(x^2)^(1*-100))*x";
struct expr *e, *r;
uint expected_result, actual_result;
int res = 0;
e = expr_from_string(str, &res);
expected_result = 18;
actual_result = e->length;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_int_eq(res, 1);
r = expr_shunt(e);
expected_result = 12;
actual_result = r->length;
ck_assert_uint_eq(expected_result, actual_result);
expr_destroy(&r);
expr_destroy(&e);

#test expr_many_functions
char str[1000] = "sin(cos(x^2)^(1*-100))*x   *tan(X)+sqrt(x/2)-log(x mod 2)";
struct expr *e, *r;
uint expected_result, actual_result;
int res = 0;
e = expr_from_string(str, &res);
expected_result = 37;
actual_result = e->length;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_int_eq(res, 1);
r = expr_shunt(e);
expected_result = 37 - 12;
actual_result = r->length;
ck_assert_uint_eq(expected_result, actual_result);
expr_destroy(&e);
expr_destroy(&r);

#test expr_wrong_formula
char str[10][1000] = {
    "sinus(X)",
    "sin(eX)",
    "sinus(cosinus(x^^2)^^^^(++1-*-100))*x(         )*tangens(X)+sqrt("
    "-x/2)-log(x mod 2)",
    "",
    {0},
    "+-x*cos(((",
    "mod 4",
    "cos(-x-)",
    "2 modulus 3",
    "2 -mod 4"};

struct expr *e;
uint expected_result[10] = {1, 3, 1, 1, 1, 2, 1, 6, 3, 3}, actual_result;
int res = 0;
// expected_result[1] = 3;
// expected_result[5] = 2;
for (int i = 0; i < 10; i++) {
  e = expr_from_string(str[i], &res);
  actual_result = e->length;
  ck_assert_uint_eq(expected_result[i], actual_result);
  ck_assert_int_eq(res, 0);
  expr_destroy(&e);
}

#test core_functions
char str[10][1000] = {"sin(x)",  "cos(x)",  "tan(x)",  "log(x)",  "ln(x)",
                      "atan(x)", "asin(x)", "acos(x)", "sqrt(x)", "abs(x)"};
typedef double (*f_ptr)(double x);
f_ptr functions[10] = {
    sin, cos, tan, log10, log, atan, asin, acos, sqrt, fabs,
};
struct expr *e, *r;
double expected_result, actual_result;
int good = 0;
for (int i = 0; i < 10; i++) {
  e = expr_from_string(str[i], &good);
  r = expr_shunt(e);
  D("i:%d func:%s\n", i, str[i]);
  for (double x = MIN_X; x < MAX_X; x += 100) {
    actual_result = rpn_reduce(r, x);
    expected_result = functions[i](x);
    if (!isnan(actual_result) && !isnan(expected_result) &&
        !isinf(expected_result) && !isinf(actual_result)) {
      if (fabs(expected_result - actual_result) > EPS)
        D("e:%f a:%f\n", expected_result, actual_result);
      ck_assert(fabs(expected_result - actual_result) < EPS);
    }
  }
  expr_destroy(&e);
  expr_destroy(&r);
}

#test core_random_expressions
double ex1(double x) {
  return sin(pow(cos(pow(x, 2)), (1 * -100))) * x * tan(x) + sqrt(x / 2) -
         log(fmod(x, 2));
}
double ex2(double x) { return sin(pow(cos(pow(x, 2)), (1 * -100))) * x; }
double ex3(double x) {
  return pow(tan(x), (fabs(x))) / asin(pow(x, -1)) + 3.14 * log(x - x / 2);
}
double ex4(double x) {
  return x + 1 - x + (x + (x - x / 2) - x * 0.01 - x * 2);
}
char str[10][1000] = {
    "sin(cos(x^2)^(1*-100))*x   *tan(X)+sqrt(x/2)-log(x mod 2)",
    "sin(cos(x^2)^(1*-100))*x",
    "tan(x)^(abs(x))/asin(x^-1)+3.14*ln(x-x/2)",
    "x+1-x+(x+(x-x/2)-x*0.01-x*2)",
    "ln(x)",
    "atan(x)",
    "asin(x)",
    "acos(x)",
    "sqrt(x)",
    "abs(x)"};
typedef double (*f_ptr)(double x);
f_ptr functions[10] = {
    ex1, ex2, ex3, ex4, log, atan, asin, acos, sqrt, fabs,
};
struct expr *e, *r;
double expected_result, actual_result;
int good = 0;
for (int i = 0; i < 10; i++) {
  e = expr_from_string(str[i], &good);
  r = expr_shunt(e);
  D("i:%d func:%s\n", i, str[i]);
  for (double x = MIN_X; x < MAX_X; x += 100) {
    actual_result = rpn_reduce(r, x);
    expected_result = functions[i](x);
    if (!isnan(actual_result) && !isnan(expected_result) &&
        !isinf(expected_result) && !isinf(actual_result)) {
      if (fabs(expected_result - actual_result) > EPS)
        D("e:%f a:%f\n", expected_result, actual_result);
      ck_assert(fabs(expected_result - actual_result) < EPS);
    }
  }
  expr_destroy(&e);
  expr_destroy(&r);
}