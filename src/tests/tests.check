#include "../rpr/core.h"
#include "../rpr/expr.h"
#include "../rpr/llist.h"
#include "../rpr/stack.h"
#define EPS 1e-7
#include <float.h>
#include <limits.h>
#include <math.h>
#include <stdlib.h>

/*
 * LIST TESTS
 */

#test ll_list_1
struct ll_node *l = ll_node_new(1, 2.2);
uint expected_result, actual_result;
expected_result = 1;
actual_result = l->state;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert(fabs(2.2 - l->datum) < EPS);
ll_destroy_list(l);

#test ll_list_2
struct ll_node *l = ll_node_new(1, 2.2);
uint expected_result, actual_result;
l = ll_node_prepend(l, 55, -99.99);
expected_result = 55;
actual_result = l->state;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert(fabs(-99.99 - l->datum) < EPS);
ll_destroy_list(l);

#test ll_list_3
struct ll_node *l = ll_node_new(1, 2.2);
uint expected_result, actual_result;
ll_node_append(l, 55, -99.99);
expected_result = 1;
actual_result = l->state;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_uint_eq(l->next->state, 55);
ck_assert(fabs(2.2 - l->datum) < EPS);
ck_assert(fabs(-99.99 - l->next->datum) < EPS);
ll_destroy_list(l);

#test ll_list_4
struct ll_node *l = ll_node_new(1, 2.2);
uint expected_result, actual_result;
expected_result = 1;
actual_result = l->state;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert(fabs(2.2 - l->datum) < EPS);
ll_node_destroy(&l);

#test ll_list_5
struct ll_node *l = ll_node_new(1, 2.2);
uint expected_result, actual_result;
for (uint i = 0; i < 1000; i++) {
  ll_node_append(l, i, -99.99 + i);
}
expected_result = 999;
actual_result = ll_last_node(l)->state;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_ptr_eq(ll_last_node(l)->next, NULL);
ll_destroy_list(l);

#test ll_list_6
struct ll_node *l = ll_node_new(1, 2.2);
uint expected_result, actual_result;
for (uint i = 0; i < 1000; i++) {
  ll_node_append(l, i, -99.99 + i);
}
expected_result = 998;
actual_result = ll_before_last_node(l)->state;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_ptr_eq(ll_before_last_node(l)->next, ll_last_node(l));
ll_destroy_list(l);

/*
 * STACK TESTS
 *
struct stk *stk_new(void);
void stk_destroy(struct stk **k);
void stk_push(struct stk *k, const unsigned int s, const double d);
void stk_pop(struct stk *k);
double stk_peek(const struct stk *k);
int stk_peek_status(const struct stk *k);
*/

#test stack_1
struct stk *s = stk_new();
uint expected_result, actual_result;
expected_result = 0;
actual_result = s->depth;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_ptr_eq(s->top, NULL);
stk_destroy(&s);

#test stack_2
struct stk *s = stk_new();
uint expected_result, actual_result;
stk_push(s, 7, -5.45);
expected_result = 1;
actual_result = s->depth;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_ptr_ne(s->top, NULL);
stk_destroy(&s);

#test stack_3
struct stk *s = stk_new();
uint expected_result, actual_result;
stk_push(s, 7, -5.45);
stk_pop(s);
expected_result = 0;
actual_result = s->depth;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_ptr_eq(s->top, NULL);
stk_destroy(&s);

#test stack_4
struct stk *s = stk_new();
uint expected_result, actual_result;
stk_push(s, 7, -5.45);
expected_result = 7;
actual_result = stk_peek_status(s);
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_ptr_ne(s->top, NULL);
stk_destroy(&s);

#test stack_5
struct stk *s = stk_new();
uint expected_result, actual_result;
stk_push(s, 7, -5.45);
expected_result = 7;
actual_result = stk_peek_status(s);
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_ptr_ne(s->top, NULL);
ck_assert(fabs(-5.45 - stk_peek(s)) < EPS);
stk_destroy(&s);

/*
 * EXPR TESTS
 *
struct expr *expr_new(void);
void expr_destroy(struct expr **e);
void expr_add_symbol(struct expr *e, const unsigned int s, const double d);
struct expr *expr_shunt(const struct expr *e);
char *one_expr_from_string(char *prog, struct expr **infix_to_fill, int *good,
                           int *parents);
struct expr *expr_from_string(char *a, int *good);
*/
#test expr_1
struct expr *e = expr_new();
uint expected_result, actual_result;
expected_result = 0;
actual_result = e->length;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_ptr_eq(e->head, NULL);
expr_destroy(&e);

#test expr_2
struct expr *e = expr_new();
uint expected_result, actual_result;
expr_add_symbol(e, 77, DBL_MAX);
expected_result = 1;
actual_result = e->length;
ck_assert_ptr_ne(e->head, NULL);
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_uint_eq(e->head->state, 77);
ck_assert(fabs(DBL_MAX - e->head->datum) < EPS);
expr_destroy(&e);

#test expr_3
struct expr *e = expr_new();
uint expected_result, actual_result;
expr_add_symbol(e, 77, DBL_MAX);
expected_result = 1;
actual_result = e->length;
ck_assert_ptr_ne(e->head, NULL);
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_uint_eq(e->head->state, 77);
ck_assert(fabs(DBL_MAX - e->head->datum) < EPS);
expr_destroy(&e);

#test expr_4
char str[1000] = "sin(cos(x^2)^(1*-100))*x";
struct expr *e;
uint expected_result, actual_result;
int res = 0;
e = expr_from_string(str, &res);
expected_result = 18;
actual_result = e->length;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_int_eq(res, 1);
expr_destroy(&e);

#test expr_5
char str[1000] = "sin(cos(x^2)^(1*-100))*x";
struct expr *e, *r;
uint expected_result, actual_result;
int res = 0;
e = expr_from_string(str, &res);
expected_result = 18;
actual_result = e->length;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_int_eq(res, 1);
r = expr_shunt(e);
expected_result = 12;
actual_result = r->length;
ck_assert_uint_eq(expected_result, actual_result);
expr_destroy(&r);

#test expr_all_functins
char str[1000] = "sin(cos(x^2)^(1*-100))*x   *tan(X)+sqrt(x/2)-log(x mod 2)";
struct expr *e, *r;
uint expected_result, actual_result;
int res = 0;
e = expr_from_string(str, &res);
expected_result = 37;
actual_result = e->length;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_int_eq(res, 1);
r = expr_shunt(e);
expected_result = 37 - 12;
actual_result = r->length;
ck_assert_uint_eq(expected_result, actual_result);
expr_destroy(&r);

#test expr_wrong_formula
char str[1000] =
    "sinus(cosinus(x^^2)^^^^(++1-*-100))*x()   *tangens(X)+sqrt(-x/2)-log(x "
    "mod 2)";
struct expr *e, *r;
uint expected_result, actual_result;
int res = 0;
e = expr_from_string(str, &res);
expected_result = 37;
actual_result = e->length;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_int_eq(res, 0);
r = expr_shunt(e);
expected_result = 37 - 12;
actual_result = r->length;
ck_assert_uint_eq(expected_result, actual_result);
expr_destroy(&r);
