#include "../rpr/core.h"
#include "../rpr/expr.h"
#include "../rpr/llist.h"
#include "../rpr/stack.h"
#define EPS 1e-7
#include <math.h>
#include <stdlib.h>

#test ll_list_1
struct ll_node *l = ll_node_new(1, 2.2);
uint expected_result, actual_result;
expected_result = 1;
actual_result = l->state;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert(fabs(2.2 - l->datum) < EPS);
ll_destroy_list(l);

#test ll_list_2
struct ll_node *l = ll_node_new(1, 2.2);
uint expected_result, actual_result;
l = ll_node_prepend(l, 55, -99.99);
expected_result = 55;
actual_result = l->state;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert(fabs(-99.99 - l->datum) < EPS);
ll_destroy_list(l);

#test ll_list_3
struct ll_node *l = ll_node_new(1, 2.2);
uint expected_result, actual_result;
ll_node_append(l, 55, -99.99);
expected_result = 1;
actual_result = l->state;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_uint_eq(l->next->state, 55);
ck_assert(fabs(2.2 - l->datum) < EPS);
ck_assert(fabs(-99.99 - l->next->datum) < EPS);
ll_destroy_list(l);

#test ll_list_4
struct ll_node *l = ll_node_new(1, 2.2);
uint expected_result, actual_result;
expected_result = 1;
actual_result = l->state;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert(fabs(2.2 - l->datum) < EPS);
ll_node_destroy(&l);

#test ll_list_5
struct ll_node *l = ll_node_new(1, 2.2);
uint expected_result, actual_result;
for (uint i = 0; i < 1000; i++) {
  ll_node_append(l, i, -99.99 + i);
}
expected_result = 999;
actual_result = ll_last_node(l)->state;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_ptr_eq(ll_last_node(l)->next, NULL);
ll_destroy_list(l);

#test ll_list_6
struct ll_node *l = ll_node_new(1, 2.2);
uint expected_result, actual_result;
for (uint i = 0; i < 1000; i++) {
  ll_node_append(l, i, -99.99 + i);
}
expected_result = 998;
actual_result = ll_before_last_node(l)->state;
ck_assert_uint_eq(expected_result, actual_result);
ck_assert_ptr_eq(ll_before_last_node(l)->next, ll_last_node(l));
ll_destroy_list(l);

/*
void ll_node_destroy(struct ll_node **n);
struct ll_node *ll_node_prepend(struct ll_node *n, const unsigned int s,
                                const double d);
void ll_node_append(struct ll_node *n, const unsigned int s, const double d);
int ll_print(const struct ll_node *n);
struct ll_node *ll_remove_node(struct ll_node *n, struct ll_node *root);
void ll_destroy_list(struct ll_node *root);
struct ll_node *ll_last_node(struct ll_node *n);
struct ll_node *ll_before_last_node(struct ll_node *n);
*/